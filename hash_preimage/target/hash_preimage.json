{"noir_version":"0.33.0+325dac54efb6f99201de9fdeb0a507d45189607d","hash":5838210652156115125,"abi":{"parameters":[{"name":"hash","type":{"kind":"field"},"visibility":"public"},{"name":"hash_preimage","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"29":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\nuse crate::hash::poseidon::PoseidonConfig;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(\n        consts::x5_2_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(\n        consts::x5_3_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(\n        consts::x5_4_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(\n        consts::x5_5_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(\n        consts::x5_6_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(\n        consts::x5_7_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(\n        consts::x5_8_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(\n        consts::x5_9_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(\n        consts::x5_10_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(\n        consts::x5_11_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(\n        consts::x5_12_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(\n        consts::x5_13_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(\n        consts::x5_14_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(\n        consts::x5_15_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(\n        consts::x5_16_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(\n        consts::x5_17_config(),\n        state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"30":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\nmod perm;\nmod consts;\n\nuse crate::hash::poseidon::{PoseidonConfig, absorb};\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of §3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"31":{"source":"mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::field::modulus_num_bits;\nuse crate::hash::Hasher;\nuse crate::default::Default;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\nstruct PoseidonConfig<let T: u32, let N: u32, let X: u32> { \n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n     // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X]\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T]\n) -> [Field; T] {\n    let PoseidonConfig {t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } = pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf/2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf/2+1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O] // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i+1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\n// Check security of sponge instantiation\nfn check_security(rate: Field, width: Field, security: Field) -> bool {\n    let n = modulus_num_bits();\n\n    ((n - 1) as Field * (width - rate) / 2) as u8 > security as u8\n}\n\nstruct PoseidonHasher{\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        } \n        if len == 2 {\n            result = bn254::hash_2([self._state[0],self._state[1]]);\n        } \n        if len == 3 {\n            result = bn254::hash_3([self._state[0],self._state[1],self._state[2]]);\n        } \n        if len == 4 {\n            result = bn254::hash_4([self._state[0],self._state[1],self._state[2],self._state[3]]);\n        } \n        if len == 5 {\n            result = bn254::hash_5([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4]]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5]]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6]]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7]]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8]]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9]]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10]]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11]]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12]]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13]]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13], self._state[14]]);\n        }\n        \n        result\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher{\n    fn default() -> Self{\n        PoseidonHasher{\n            _state: &[],\n        }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a, 0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29, 0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c\n            ];\n            assert_eq(expected, poseidon::bn254::perm::x5_3(state), \"Failed to reproduce output for [0, 1, 2]\");\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465, 0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d, 0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907, 0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e, 0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7\n            ];\n            assert_eq(\n                expected, poseidon::bn254::perm::x5_5(state), \"Failed to reproduce output for [0, 1, 2, 3, 4]\"\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"57":{"source":"use dep::std::hash::poseidon;\n\nfn main(hash: pub Field, hash_preimage: Field) {\n    let internal_hash = poseidon::bn254::hash_1([hash_preimage]);\n\n    assert(internal_hash == hash);\n}\n\n#[test]\nfn test_main() {\n    let hash_preimage = 0;\n    let hash = poseidon::bn254::hash_1([hash_preimage]);\n\n    main(hash, hash_preimage);\n}\n","path":"/Users/riemann/Desktop/zkvideo/zk-imt/hash_preimage/src/main.nr"}},"names":["main"]}